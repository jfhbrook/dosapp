#!/usr/bin/env bash

set -euo pipefail

export DOSAPP_VERSION=1.0.0

# Inject default root with package installer
export DOSAPP_ROOT=''

#
# Logging
#

export DEBUG="${DEBUG:-}"

function log-debug {
  if [ -n "${DEBUG}" ]; then
    echo "DEBUG:" "$@"
  fi
}

function log-info {
  echo "INFO:" "$@"
}

function log-warn {
  echo "WARN:" "$@"
}

function log-error {
  echo "ERROR:" "$@"
}

#
# Configuration
#

function load-config {
  export DOSAPP_ROOT="${DOSAPP_ROOT:-$(dirname "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")")}"
  export DOSAPP_CONFIG_HOME="${DOSAPP_CONFIG_HOME:-${XDG_CONFIG_HOME:-${HOME}/.config}/dosapp}"

  if [ -f "${DOSAPP_CONFIG_HOME}/dosapp.env" ]; then
    # shellcheck disable=SC1091
    source "${DOSAPP_CONFIG_HOME}/dosapp.env"
  fi

  export DEBUG="${DEBUG:-}"
  export DOSAPP_DOSBOX_BIN="${DOSAPP_DOSBOX_BIN:-dosbox-x}"
  export DOSAPP_7Z_BIN="${DOSAPP_7Z_BIN:-7zz}"
  export DOSAPP_DATA_HOME="${DOSAPP_DATA_HOME:-${XDG_DATA_HOME:-${HOME}/.local/share}/dosapp}"
  export DOSAPP_STATE_HOME="${DOSAPP_STATE_HOME:-${XDG_STATE_HOME:-${HOME}/.local/state}/dosapp}"
  export DOSAPP_CACHE_HOME="${DOSAPP_CACHE_HOME:-${XDG_CACHE_HOME:-${HOME}/.cache}/dosapp}"
  export DOSAPP_DISK_HOME="${DOSAPP_DISK_HOME:-${HOME}/dosapp}"
  export DOSAPP_LINK_HOME="${DOSAPP_LINK_HOME:-${HOME}/.local/bin}"
  export DOSAPP_PACKAGE_HOME="${DOSAPP_PACKAGE_HOME:-${DOSAPP_ROOT}/packages}"
  export DOSAPP_DOWNLOAD_HOME="${DOSAPP_DOWNLOAD_HOME:-${DOSAPP_CACHE_HOME}/downloads}"
  export PAGER="${PAGER:-cat}"
  export DOSAPP_DISK_A="${DOSAPP_DISK_A:-${HOME}/Documents}"
  export DOSAPP_DISK_B="${DOSAPP_DISK_B:-}"
  export DOSAPP_DISK_C="${DOSAPP_DISK_C:-${HOME}/dosapp/c}"
}

#
# Command options
#

HELP=''
EDIT='1'
OVERWRITE=''
REFRESH=''
README='1'
REMOVE=''
SUBCOMMAND=''
APP_NAME=''

function parse-argv {
  log-debug "Parsing arguments:" "$@"
  while [[ $# -gt 0 ]]; do
    case "${1}" in
      --no-edit)
        EDIT=''
        shift
        ;;
      -h|--help)
        HELP=1
        shift
        ;;
      --overwrite)
        OVERWRITE=1
        shift
        ;;
      --no-readme)
        README=''
        shift
        ;;
      --refresh)
        REFRESH='1'
        shift
        ;;
      --remove)
        REMOVE=1
        shift
        ;;
      --version)
        echo "v${DOSAPP_VERSION}"
        exit 0
        ;;
      -*)
        log-error "Unknown option: ${1}" 
        exit 1
        ;;
      *)
        if [ -z "${SUBCOMMAND}" ]; then
          SUBCOMMAND="${1}"
          shift
        elif [[ "${SUBCOMMAND}" == install ]] \
          || [[ "${SUBCOMMAND}" == remove ]] \
          || [[ "${SUBCOMMAND}" == start ]] \
          || [[ "${SUBCOMMAND}" == link ]]; then
          APP_NAME="${1}"
          shift
        else
          log-error "Unknown argument: ${1}"
          exit 1
        fi
        ;;
    esac
  done
}

#
# Require that an app name is defined
#

function require-app {
  if [ -z "${APP_NAME}" ]; then
    log-error "App name is required"
    exit 1
  fi
}

#
# Require that an app is installed
#

function require-app-installed {
  if [ ! -d "${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}" ]; then
    log-error "${APP_NAME} not found. Did you install it?"
    exit 1
  fi
}


#
# App config initialization and setup
#

function init-app-config {
  if [ ! -d "${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}" ]; then
    mkdir -p "${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}"

    gomplate -i "$(cat "${DOSAPP_PACKAGE_HOME}/${APP_NAME}/dosapp.env.tmpl")" > "${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}/dosapp.env"
    log-info "Environment file written to ${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}/dosapp.env"

    edit-config "${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}/dosapp.env"

    REFRESH='1'
  fi
}

function edit-config {
  if [ -n "${EDIT}" ]; then
    if [ -n "${EDITOR}" ]; then
      ${EDITOR} "${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}/dosapp.env"
    else
      log-warn "EDITOR not defined. Skipping editing env file."
    fi
  else
    log-info "Skipping editing env file."
  fi
}

#
# Refresh configuration
#

function refresh-main {
  if [ -n "${APP_NAME}" ] && [ -n "${OVERWRITE}" ] || [ -n "${REFRESH}" ]; then
    cp "${DOSAPP_ROOT}/config/Taskfile.yml" "${DOSAPP_CONFIG_HOME}/Taskfile.yml"
    (cd "${DOSAPP_CONFIG_HOME}" && task init)
  else
    log-info "To refresh the configuration, run 'dosapp --refresh'"
  fi
}

function refresh-app {
  if [ -n "${OVERWRITE}" ] || [ -n "${REFRESH}" ]; then
    cp "${DOSAPP_PACKAGE_HOME}/${APP_NAME}/Taskfile.yml" "${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}/Taskfile.yml"
    cp "${DOSAPP_PACKAGE_HOME}/${APP_NAME}/README.md" "${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}/README.md"

    (cd "${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}" && task init)
  else
    log-info "To refresh the configuration, run 'dosapp --refresh'"
  fi
}

#
# Display an app's README
#

function show-readme {
  if [ -n "${README}" ]; then
    ${PAGER} "${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}/README.md"
  else
    log-info "README written to ${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}/README.md"
  fi
}

#
# Root command
#

function run-root {
  refresh-main

  (cd "${DOSAPP_CONFIG_HOME}" && task start)
}

function help-root {
  echo "USAGE: dosapp [SUBCOMMAND] [OPTIONS]

When called without a subcommand, dosapp will start DOSBox with the default
configuration.

SUBCOMMANDS:
  init      Initialize dosapp's config
  install   Configure an app and run its installer
  start     Start an app
  link      Create a script that starts the app

OPTIONS:
  --help     Show this help message
  --refresh   Generate new task and conf files
  --version   Print the version of dosapp"
}

#
# Init command
#

function run-init {
  if [ -f "${DOSAPP_CONFIG_HOME}/dosapp.env" ] && [ -z "${OVERWRITE}" ]; then
    log-warn "Environment file already exists at ${DOSAPP_CONFIG_HOME}/dosapp.env"
    log-warn "To overwrite and refresh the configuration, run 'dosapp init --overwrite'"
  else
    REFRESH='1'
    cp "${DOSAPP_ROOT}/config/dosapp.env" "${DOSAPP_CONFIG_HOME}/dosapp.env"
    log-info "Environment file created at ${DOSAPP_CONFIG_HOME}/dosapp.env"
  fi

  edit-config "${DOSAPP_CONFIG_HOME}/dosapp.env"

  load-config

  if [ ! -f "${DOSAPP_ROOT}/config/Taskfile.yml" ]; then
    REFRESH=1
  fi

  refresh-main
}

function help-init {
  echo "USAGE: dosapp init [OPTIONS]

Initialize dosapp's configuration.

OPTIONS:
  --no-edit  Skip editing environment files
  --help     Show this help message
  --overwrite Overwrite existing configuration
  --refresh   Generate new task and conf files"
}

#
# Install command
#

function run-install {
  require-app
  refresh-main
  init-app-config
  refresh-app

  show-readme

  (cd "${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}" && task install)
}

function help-install {
  echo "USAGE: dosapp install [APP] [OPTIONS]

Set up the package and configuration for the app, and run its installer.

OPTIONS:
  --no-edit   Skip editing environment files
  --help      Show this help message
  --overwrite Overwrite existing configuration
  --no-readme Skip displaying the README
  --refresh   Generate new task and conf files"
}

#
# Remove command
#

function run-remove {
  require-app
  require-app-installed
  refresh-main
  init-app-config
  refresh-app

  (cd "${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}" && task remove-link)
  (cd "${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}" && task remove)
  rm -r "${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}"
}

function help-remove {
  echo "USAGE: dosapp remove [APP] [OPTIONS]

Unlink the app and remove its configuration.

OPTIONS:
  --help      Show this help message
  --overwrite Overwrite existing configuration
  --refresh   Generate new task and conf files"
}

#
# Start command
#

function run-start {
  require-app
  require-app-installed
  refresh-main
  init-app-config
  refresh-app

  (cd "${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}" && task start)
}

function help-start {
  echo "USAGE: dosapp start [APP] [OPTIONS]

Start the application.

OPTIONS:
  --help     Show this help message
  --refresh   Generate new task and conf files"
}

#
# Link command
#

function run-link {
  require-app
  require-app-installed
  refresh-main
  init-app-config
  refresh-app

  if [ -n "${REMOVE}" ]; then
    (cd "${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}" && task remove-link)
  else
    (cd "${DOSAPP_CONFIG_HOME}/apps/${APP_NAME}" && task link)
  fi
}

function help-link {
  echo "USAGE: dosapp link [APP] [OPTIONS]

Create a script in ${DOSAPP_LINK_HOME} that starts the app.

OPTIONS:
  --help     Show this help message
  --refresh  Generate new task and conf files
  --remove   Remove the link"
}

#
# Publish command
#

function run-publish {
  local name
  local version
  local release_version

  if [ ! -f 'Package.yml' ]; then
    log-error "Package.yml not found."
    exit 1
  fi

  name="$(yq '.name' 'Package.yml')"
  version="$(yq '.version' 'Package.yml')"
  release_version="$(yq '.release_version' 'Package.yml')"

  local missing_fields=""

  if [[ "${name}" == null ]]; then
    if [ -n "${missing_fields}" ]; then
      missing_fields+=", "
    fi
    missing_fields+=name
  fi

  if [[ "${version}" == null ]]; then
    if [ -n "${missing_fields}" ]; then
      missing_fields+=", "
    fi
    missing_fields+=version
  fi
  
  if [[ "${release_version}" == null ]]; then
    if [ -n "${missing_fields}" ]; then
      missing_fields+=", "
    fi
    missing_fields+=release_version
  fi

  if [ -n "${missing_fields}" ]; then
    log-error "Package.yml must define: ${missing_fields}"
    exit 1
  fi

  # TODO: Allow listing included files in Package.yml

  local tag="${name}-${version}-${release_version}"
  local argv=(--exclude "${tag}.tar.gz")

  if [[ "${OSTYPE}" == "darwin"* ]]; then
    argv+=(-s ",^,${tag}/,")
  else
    argv+=(--transform 's,^,${tag}/,')
  fi

  tar -czf "${tag}.tar.gz" ${argv[@]} .

  gh release create "${tag}" \
    -t "${name} v${version} - release ${release_version}" \
    --notes "Package ${name} v${version}, release ${release_version}." \
    "${tag}.tar.gz"
}

function help-publish {
  echo "USAGE: dosapp publish

Publish the current app by creating and uploading a GitHub release.

OPTIONS:
  --help     Show this help message"
}

#
# Main
#

function main {
  load-config

  parse-argv "$@"

  if [ -n "${HELP}" ]; then
    case "${SUBCOMMAND}" in
      init)
        help-init
        ;;
      install)
        help-install
        ;;
      remove)
        help-remove
        ;;
      start)
        help-start
        ;;
      link)
        help-link
        ;;
      publish)
        help-publish
        ;;
      *)
        help-root
        ;;
    esac
    exit 0
  fi

  if [ -z "${SUBCOMMAND}" ]; then
    run-root
  else
    case "${SUBCOMMAND}" in
      init)
        run-init
        ;;
      install)
        run-install
        ;;
      remove)
        run-remove
        ;;
      start)
        run-start
        ;;
      link)
        run-link
        ;;
      publish)
        run-publish
        ;;
      *)
        log-error "Unknown subcommand: ${SUBCOMMAND}"
        exit 1
        ;;
    esac
  fi
}

#
# Giddyup.
#

main "$@"
